{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfeild","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCHSC,EAbJ,SAACC,GAAU,IACbC,EAAqBD,EAArBC,KAAOC,EAAcF,EAAdE,MAAQC,EAAMH,EAANG,GACvB,OACC,yBAAKC,UAAU,wDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCYOK,EAlBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAChB,OACA,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACC,kBAAC,EAAD,CACAC,IAAMD,EACNR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCCTW,EAZC,SAAC,GAAgC,EAA9BC,YAA+B,IAAjBC,EAAgB,EAAhBA,aAChC,OACC,yBAAKX,UAAU,OACd,2BACAA,UAAU,oCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCEI,EARA,SAACnB,GACf,OACC,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEvB,EAAMwB,WCuCKC,G,wDAnCd,aAAc,IAAD,8BACZ,gBAcDC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd5C,EAAKC,MAAQ,CACZxB,OAAQ,GACRqB,YAAa,IAJF,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEpB,OAAQ6B,S,+BAQ9B,IAAD,OACFC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAC,GAC3C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEnE,OACC,yBAAKtC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKb,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GA9BJM,c,MCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8042c007.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card=(props)=> {\n\tconst { name , email , id} = props;\n\treturn(\n\t\t<div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList=({robots})=>{\n\treturn(\n\t<div>\n\t\t{\t\n\t\t\trobots.map((user, i) => {\n\t\t  \t\treturn(\n\t\t  \t\t\t<Card \n\t\t  \t\t\tkey= {i}\n\t\t  \t\t\tid={robots[i].id} \n\t\t  \t\t\tname={robots[i].name} \n\t\t  \t\t\temail={robots[i].email}/>\n\t\t  \t\t);\n\t\t\t})\n\t\t}\n\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({ searchfield , searchChange})=>{\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightesrt-blue'\n\t\t\ttype=\"search\" \n\t\t\tplaceholder='search Robots'\n\t\t\tonChange={searchChange} \n\t\t\t/>\n\t\t</div>\n\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props)=> {\n\treturn(\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}} >\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React , {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n\nclass App extends Component {\n\t\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfeild: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(users => this.setState({ robots: users}));\n\t}\n\t\n\t\n\tonSearchChange = (event) =>{\n \t \tthis.setState({ searchfeild: event.target.value})\n\t}\n\n\trender() {\n\t\tconst filterRobots = this.state.robots.filter(robot =>{\n \t \t\treturn robot.name.toLowerCase().includes(this.state.searchfeild.toLowerCase());\n \t \t})\n\t\treturn(\n\t\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t<CardList robots={filterRobots} />\n\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}